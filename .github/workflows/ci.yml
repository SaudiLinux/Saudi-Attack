name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nmap libxml2-dev libxslt1-dev zlib1g-dev gcc
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pylint black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    
    - name: Lint with pylint
      run: |
        pylint --disable=C0111,C0103,C0303,C0330,C0326,C0301,C0302,C0305,W0511,R0902,R0903,R0904,R0912,R0913,R0914,R0915,R1702,R1705,R1710,R1720 modules/ saudi_attack.py
    
    - name: Check formatting with black
      run: |
        black --check --diff modules/ saudi_attack.py
    
    - name: Check imports with isort
      run: |
        isort --check --diff modules/ saudi_attack.py
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports modules/ saudi_attack.py
    
    - name: Test with pytest
      run: |
        pytest --cov=modules --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: saudiattack:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max