#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pytest
import os
import sys
import json
from unittest.mock import patch, MagicMock, mock_open

# إضافة المجلد الرئيسي إلى مسار البحث
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# استيراد وحدة قاعدة بيانات الثغرات الأمنية
from modules.vulnerability_database import VulnerabilityDatabase


class TestVulnerabilityDatabase:
    """اختبارات لوحدة قاعدة بيانات الثغرات الأمنية"""

    @pytest.fixture
    def mock_vuln_data(self):
        """بيانات مزيفة للثغرات الأمنية"""
        return {
            "wordpress": {
                "plugins": {
                    "contact-form-7": {
                        "vulnerabilities": [
                            {
                                "id": "CVE-2020-12345",
                                "title": "XSS in Contact Form 7",
                                "description": "Cross-site scripting vulnerability in Contact Form 7 plugin",
                                "cvss": 6.5,
                                "affected_versions": ["<5.3.2"],
                                "fixed_version": "5.3.2",
                                "references": ["https://example.com/cve-2020-12345"]
                            }
                        ]
                    }
                },
                "themes": {
                    "twentytwenty": {
                        "vulnerabilities": [
                            {
                                "id": "CVE-2020-54321",
                                "title": "CSRF in Twenty Twenty Theme",
                                "description": "CSRF vulnerability in Twenty Twenty theme",
                                "cvss": 5.5,
                                "affected_versions": ["<1.5"],
                                "fixed_version": "1.5",
                                "references": ["https://example.com/cve-2020-54321"]
                            }
                        ]
                    }
                },
                "core": {
                    "vulnerabilities": [
                        {
                            "id": "CVE-2020-98765",
                            "title": "SQL Injection in WordPress Core",
                            "description": "SQL injection vulnerability in WordPress core",
                            "cvss": 8.5,
                            "affected_versions": ["<5.5.0"],
                            "fixed_version": "5.5.0",
                            "references": ["https://example.com/cve-2020-98765"]
                        }
                    ]
                }
            },
            "joomla": {
                "components": {
                    "com_content": {
                        "vulnerabilities": [
                            {
                                "id": "CVE-2020-11111",
                                "title": "RCE in com_content",
                                "description": "Remote code execution in com_content component",
                                "cvss": 9.0,
                                "affected_versions": ["<3.9.20"],
                                "fixed_version": "3.9.20",
                                "references": ["https://example.com/cve-2020-11111"]
                            }
                        ]
                    }
                },
                "core": {
                    "vulnerabilities": [
                        {
                            "id": "CVE-2020-22222",
                            "title": "Authentication Bypass in Joomla",
                            "description": "Authentication bypass vulnerability in Joomla core",
                            "cvss": 7.5,
                            "affected_versions": ["<3.9.19"],
                            "fixed_version": "3.9.19",
                            "references": ["https://example.com/cve-2020-22222"]
                        }
                    ]
                }
            },
            "web_servers": {
                "apache": {
                    "vulnerabilities": [
                        {
                            "id": "CVE-2020-33333",
                            "title": "DoS in Apache",
                            "description": "Denial of service vulnerability in Apache",
                            "cvss": 6.0,
                            "affected_versions": ["<2.4.46"],
                            "fixed_version": "2.4.46",
                            "references": ["https://example.com/cve-2020-33333"]
                        }
                    ]
                },
                "nginx": {
                    "vulnerabilities": [
                        {
                            "id": "CVE-2020-44444",
                            "title": "Information Disclosure in Nginx",
                            "description": "Information disclosure vulnerability in Nginx",
                            "cvss": 5.0,
                            "affected_versions": ["<1.18.0"],
                            "fixed_version": "1.18.0",
                            "references": ["https://example.com/cve-2020-44444"]
                        }
                    ]
                }
            }
        }

    @patch('builtins.open', new_callable=mock_open)
    @patch('json.load')
    def test_init_with_custom_db(self, mock_json_load, mock_file, mock_vuln_data):
        """اختبار تهيئة قاعدة البيانات بملف مخصص"""
        # تكوين السلوك المزيف
        mock_json_load.return_value = mock_vuln_data
        
        # تنفيذ الاختبار
        db = VulnerabilityDatabase(db_file="custom_db.json")
        
        # التحقق من النتائج
        mock_file.assert_called_once_with("custom_db.json", "r", encoding="utf-8")
        assert db.db == mock_vuln_data

    @patch('builtins.open', new_callable=mock_open)
    @patch('json.load')
    def test_init_with_default_db(self, mock_json_load, mock_file, mock_vuln_data):
        """اختبار تهيئة قاعدة البيانات بالملف الافتراضي"""
        # تكوين السلوك المزيف
        mock_json_load.return_value = mock_vuln_data
        
        # تنفيذ الاختبار
        db = VulnerabilityDatabase()
        
        # التحقق من النتائج
        assert mock_file.call_count == 1
        assert "vulnerabilities.json" in str(mock_file.call_args[0][0])
        assert db.db == mock_vuln_data

    @patch('builtins.open', side_effect=FileNotFoundError)
    def test_init_with_missing_db(self, mock_file):
        """اختبار تهيئة قاعدة البيانات مع ملف مفقود"""
        # تنفيذ الاختبار
        db = VulnerabilityDatabase()
        
        # التحقق من النتائج
        assert db.db == {}

    def test_check_wordpress_plugin_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات إضافات ووردبريس"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار إضافة مصابة
        vulns = db.check_wordpress_plugin_vulnerabilities("contact-form-7", "5.3.1")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-12345"
        
        # اختبار إضافة محدثة
        vulns = db.check_wordpress_plugin_vulnerabilities("contact-form-7", "5.3.2")
        assert len(vulns) == 0
        
        # اختبار إضافة غير موجودة
        vulns = db.check_wordpress_plugin_vulnerabilities("nonexistent-plugin", "1.0.0")
        assert len(vulns) == 0

    def test_check_wordpress_theme_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات قوالب ووردبريس"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار قالب مصاب
        vulns = db.check_wordpress_theme_vulnerabilities("twentytwenty", "1.4")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-54321"
        
        # اختبار قالب محدث
        vulns = db.check_wordpress_theme_vulnerabilities("twentytwenty", "1.5")
        assert len(vulns) == 0
        
        # اختبار قالب غير موجود
        vulns = db.check_wordpress_theme_vulnerabilities("nonexistent-theme", "1.0.0")
        assert len(vulns) == 0

    def test_check_wordpress_core_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات نواة ووردبريس"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار نواة مصابة
        vulns = db.check_wordpress_core_vulnerabilities("5.4.2")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-98765"
        
        # اختبار نواة محدثة
        vulns = db.check_wordpress_core_vulnerabilities("5.5.0")
        assert len(vulns) == 0

    def test_check_joomla_component_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات مكونات جوملا"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار مكون مصاب
        vulns = db.check_joomla_component_vulnerabilities("com_content", "3.9.19")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-11111"
        
        # اختبار مكون محدث
        vulns = db.check_joomla_component_vulnerabilities("com_content", "3.9.20")
        assert len(vulns) == 0
        
        # اختبار مكون غير موجود
        vulns = db.check_joomla_component_vulnerabilities("nonexistent-component", "1.0.0")
        assert len(vulns) == 0

    def test_check_joomla_core_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات نواة جوملا"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار نواة مصابة
        vulns = db.check_joomla_core_vulnerabilities("3.9.18")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-22222"
        
        # اختبار نواة محدثة
        vulns = db.check_joomla_core_vulnerabilities("3.9.19")
        assert len(vulns) == 0

    def test_check_web_server_vulnerabilities(self, mock_vuln_data):
        """اختبار التحقق من ثغرات خادم الويب"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # اختبار خادم أباتشي مصاب
        vulns = db.check_web_server_vulnerabilities("apache", "2.4.45")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-33333"
        
        # اختبار خادم أباتشي محدث
        vulns = db.check_web_server_vulnerabilities("apache", "2.4.46")
        assert len(vulns) == 0
        
        # اختبار خادم نجينكس مصاب
        vulns = db.check_web_server_vulnerabilities("nginx", "1.17.10")
        assert len(vulns) == 1
        assert vulns[0]["id"] == "CVE-2020-44444"
        
        # اختبار خادم نجينكس محدث
        vulns = db.check_web_server_vulnerabilities("nginx", "1.18.0")
        assert len(vulns) == 0
        
        # اختبار خادم غير موجود
        vulns = db.check_web_server_vulnerabilities("nonexistent-server", "1.0.0")
        assert len(vulns) == 0

    def test_is_version_affected(self, mock_vuln_data):
        """اختبار التحقق من تأثر الإصدار"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        
        # اختبار الإصدارات المتأثرة
        assert db._is_version_affected("5.3.1", ["<5.3.2"]) is True
        assert db._is_version_affected("1.0.0", [">=1.0.0", "<2.0.0"]) is True
        assert db._is_version_affected("2.5.0", ["2.5.0"]) is True
        assert db._is_version_affected("3.0.0", ["3.0.0", "3.1.0"]) is True
        
        # اختبار الإصدارات غير المتأثرة
        assert db._is_version_affected("5.3.2", ["<5.3.2"]) is False
        assert db._is_version_affected("2.0.0", [">=1.0.0", "<2.0.0"]) is False
        assert db._is_version_affected("2.5.1", ["2.5.0"]) is False
        
        # اختبار حالات خاصة
        assert db._is_version_affected("1.0.0-beta", ["<1.0.0"]) is True
        assert db._is_version_affected("1.0.0-rc1", ["<1.0.0"]) is True
        assert db._is_version_affected("1.0.0", ["<1.0.0-beta"]) is False

    @patch('builtins.open', new_callable=mock_open)
    @patch('json.dump')
    def test_update_database(self, mock_json_dump, mock_file, mock_vuln_data):
        """اختبار تحديث قاعدة البيانات"""
        # تكوين قاعدة البيانات
        db = VulnerabilityDatabase()
        db.db = {}
        
        # تنفيذ الاختبار
        db.update_database(mock_vuln_data)
        
        # التحقق من النتائج
        assert db.db == mock_vuln_data
        assert mock_file.call_count == 1
        assert "vulnerabilities.json" in str(mock_file.call_args[0][0])
        mock_json_dump.assert_called_once_with(mock_vuln_data, mock_file(), indent=4, ensure_ascii=False)

    def test_merge_vulnerabilities(self, mock_vuln_data):
        """اختبار دمج قواعد بيانات الثغرات"""
        # تكوين قاعدة البيانات الأولى
        db = VulnerabilityDatabase()
        db.db = mock_vuln_data
        
        # تكوين قاعدة البيانات الثانية
        new_vulns = {
            "wordpress": {
                "plugins": {
                    "woocommerce": {
                        "vulnerabilities": [
                            {
                                "id": "CVE-2021-12345",
                                "title": "XSS in WooCommerce",
                                "description": "Cross-site scripting vulnerability in WooCommerce plugin",
                                "cvss": 6.0,
                                "affected_versions": ["<5.0.0"],
                                "fixed_version": "5.0.0",
                                "references": ["https://example.com/cve-2021-12345"]
                            }
                        ]
                    }
                }
            }
        }
        
        # تنفيذ الاختبار
        merged_db = db.merge_vulnerabilities(new_vulns)
        
        # التحقق من النتائج
        assert "woocommerce" in merged_db["wordpress"]["plugins"]
        assert "contact-form-7" in merged_db["wordpress"]["plugins"]
        assert len(merged_db["wordpress"]["plugins"]["woocommerce"]["vulnerabilities"]) == 1
        assert merged_db["wordpress"]["plugins"]["woocommerce"]["vulnerabilities"][0]["id"] == "CVE-2021-12345"